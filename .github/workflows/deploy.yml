name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_APP_DIR: ${{ secrets.EC2_APP_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: client/.nvmrc

      - name: Build client
        working-directory: client
        run: |
          npm ci
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync client to S3
        run: |
          aws s3 sync client/dist s3://${{ env.S3_BUCKET }} --delete --cache-control max-age=31536000,public --exclude index.html
          aws s3 cp client/dist/index.html s3://${{ env.S3_BUCKET }}/index.html --cache-control no-cache,public --content-type text/html

      - name: Invalidate CloudFront
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation --distribution-id "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" --paths "/index.html" "/assets/*"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Package server artifacts
        run: |
          python -m pip install --upgrade pip
          tar czf server.tar.gz main.py frank requirements.txt .env.example infra/server/setup_ec2.sh

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy artifacts to EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" server.tar.gz ${EC2_USER}@${EC2_HOST}:/tmp/

      - name: Remote deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} "\
            set -euo pipefail; \
            sudo mkdir -p ${EC2_APP_DIR}; \
            sudo chown -R ${EC2_USER}:${EC2_USER} ${EC2_APP_DIR}; \
            tar xzf /tmp/server.tar.gz -C ${EC2_APP_DIR} --strip-components=0; \
            if [ ! -f ${EC2_APP_DIR}/.env ]; then echo 'ERROR: Missing .env on EC2 at ${EC2_APP_DIR}/.env. Upload it once via: scp .env ${EC2_USER}@${EC2_HOST}:${EC2_APP_DIR}/.env' >&2; exit 1; fi; \
            sudo APP_DIR=${EC2_APP_DIR} USER_NAME=${EC2_USER} GROUP_NAME=${EC2_USER} bash ${EC2_APP_DIR}/infra/server/setup_ec2.sh; \
            curl -fsS http://127.0.0.1/api/healthz | grep -q '"ok"' || (echo 'Health check failed' >&2; exit 1); \
          "